// Mocks generated by Mockito 5.4.4 from annotations
// in savage_client/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i12;

import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:flutter/material.dart' as _i9;
import 'package:image_picker/image_picker.dart' as _i24;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;
import 'package:savage_client/data/booking.dart' as _i18;
import 'package:savage_client/data/desk.dart' as _i20;
import 'package:savage_client/data/desk_booking.dart' as _i5;
import 'package:savage_client/data/enums/booking_type.dart' as _i29;
import 'package:savage_client/data/meeting_room.dart' as _i21;
import 'package:savage_client/data/meeting_room_booking.dart' as _i6;
import 'package:savage_client/data/member_data.dart' as _i4;
import 'package:savage_client/data/user.dart' as _i19;
import 'package:savage_client/services/booking_service.dart' as _i28;
import 'package:savage_client/services/dependency_wrappers/analytics_service.dart'
    as _i25;
import 'package:savage_client/services/dependency_wrappers/authentication_service.dart'
    as _i15;
import 'package:savage_client/services/dependency_wrappers/crashlytics_service.dart'
    as _i26;
import 'package:savage_client/services/dependency_wrappers/database_service.dart'
    as _i17;
import 'package:savage_client/services/dependency_wrappers/functions_service.dart'
    as _i22;
import 'package:savage_client/services/dependency_wrappers/image_picker_service.dart'
    as _i32;
import 'package:savage_client/services/dependency_wrappers/storage_service.dart'
    as _i23;
import 'package:savage_client/services/dependency_wrappers/url_launcher_service.dart'
    as _i33;
import 'package:savage_client/services/desks_service.dart' as _i30;
import 'package:savage_client/services/meeting_room_service.dart' as _i34;
import 'package:savage_client/services/member_data_service.dart' as _i31;
import 'package:savage_client/services/user_service.dart' as _i27;
import 'package:stacked/stacked.dart' as _i2;
import 'package:stacked_services/src/bottom_sheet/bottom_sheet_service.dart'
    as _i10;
import 'package:stacked_services/src/dialog/dialog_service.dart' as _i13;
import 'package:stacked_services/src/models/overlay_request.dart' as _i14;
import 'package:stacked_services/src/models/overlay_response.dart' as _i11;
import 'package:stacked_services/src/navigation/router_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRootStackRouter_0 extends _i1.SmartFake
    implements _i2.RootStackRouter {
  _FakeRootStackRouter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteData_1 extends _i1.SmartFake implements _i2.RouteData {
  _FakeRouteData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoutingController_2 extends _i1.SmartFake
    implements _i2.RoutingController {
  _FakeRoutingController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAuth_3 extends _i1.SmartFake implements _i3.FirebaseAuth {
  _FakeFirebaseAuth_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMemberData_4 extends _i1.SmartFake implements _i4.MemberData {
  _FakeMemberData_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeskBooking_5 extends _i1.SmartFake implements _i5.DeskBooking {
  _FakeDeskBooking_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMeetingRoomBooking_6 extends _i1.SmartFake
    implements _i6.MeetingRoomBooking {
  _FakeMeetingRoomBooking_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RouterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouterService extends _i1.Mock implements _i7.RouterService {
  @override
  _i2.RootStackRouter get router => (super.noSuchMethod(
        Invocation.getter(#router),
        returnValue: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
        returnValueForMissingStub: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
      ) as _i2.RootStackRouter);

  @override
  set router(_i2.RootStackRouter? _router) => super.noSuchMethod(
        Invocation.setter(
          #router,
          _router,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.StackedPage<dynamic>> get stack => (super.noSuchMethod(
        Invocation.getter(#stack),
        returnValue: <_i2.StackedPage<dynamic>>[],
        returnValueForMissingStub: <_i2.StackedPage<dynamic>>[],
      ) as List<_i2.StackedPage<dynamic>>);

  @override
  _i2.RouteData get topRoute => (super.noSuchMethod(
        Invocation.getter(#topRoute),
        returnValue: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
        returnValueForMissingStub: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
      ) as _i2.RouteData);

  @override
  dynamic setRouter(_i2.RootStackRouter? router) => super.noSuchMethod(
        Invocation.method(
          #setRouter,
          [router],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<dynamic> navigateTo(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);

  @override
  _i8.Future<void> navigateToPath({
    required String? path,
    bool? includePrefixMatches = false,
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToPath,
          [],
          {
            #path: path,
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<T?> navigateWithTransition<T extends Object?>(
    _i9.Widget? widget, {
    _i9.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  _i8.Future<T?> replaceWith<T extends Object?>(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  _i8.Future<void> clearStackAndShow(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> clearStackAndShowView(
    _i9.Widget? widget, {
    _i9.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void popForced<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #popForced,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<bool> pop<T extends Object?>([T? result]) => (super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void back<T extends Object?>({T? result}) => super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {#result: result},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RoutingController topMostRouter({bool? ignorePagelessRoutes = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #topMostRouter,
          [],
          {#ignorePagelessRoutes: ignorePagelessRoutes},
        ),
        returnValue: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
        returnValueForMissingStub: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
      ) as _i2.RoutingController);

  @override
  _i8.Future<T?> pushNativeRoute<T extends Object?>(_i9.Route<T>? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNativeRoute,
          [route],
        ),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i10.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i10.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i11.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i8.Future<_i11.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i8.Future<_i11.SheetResponse<dynamic>?>.value(),
      ) as _i8.Future<_i11.SheetResponse<dynamic>?>);

  @override
  _i8.Future<_i11.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i12.Color? barrierColor = const _i12.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i8.Future<_i11.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i8.Future<_i11.SheetResponse<T>?>.value(),
      ) as _i8.Future<_i11.SheetResponse<T>?>);

  @override
  void completeSheet(_i11.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i13.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i13.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i9.Widget Function(
      _i9.BuildContext,
      _i14.DialogRequest<dynamic>,
      dynamic Function(_i11.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i11.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i12.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i12.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i13.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i8.Future<_i11.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i8.Future<_i11.DialogResponse<dynamic>?>.value(),
      ) as _i8.Future<_i11.DialogResponse<dynamic>?>);

  @override
  _i8.Future<_i11.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i12.Color? barrierColor = const _i12.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i8.Future<_i11.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i8.Future<_i11.DialogResponse<T>?>.value(),
      ) as _i8.Future<_i11.DialogResponse<T>?>);

  @override
  _i8.Future<_i11.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i12.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i12.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i13.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i8.Future<_i11.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i8.Future<_i11.DialogResponse<dynamic>?>.value(),
      ) as _i8.Future<_i11.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i11.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthenticationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationService extends _i1.Mock
    implements _i15.AuthenticationService {
  @override
  _i3.FirebaseAuth get firebaseAuth => (super.noSuchMethod(
        Invocation.getter(#firebaseAuth),
        returnValue: _FakeFirebaseAuth_3(
          this,
          Invocation.getter(#firebaseAuth),
        ),
        returnValueForMissingStub: _FakeFirebaseAuth_3(
          this,
          Invocation.getter(#firebaseAuth),
        ),
      ) as _i3.FirebaseAuth);

  @override
  bool get isSignedIn => (super.noSuchMethod(
        Invocation.getter(#isSignedIn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isEmailVerified => (super.noSuchMethod(
        Invocation.getter(#isEmailVerified),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: _i16.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
        returnValueForMissingStub: _i16.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
      ) as String);

  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i16.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
        returnValueForMissingStub: _i16.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  _i8.Future<bool> isAdmin([bool? forceRefresh = false]) => (super.noSuchMethod(
        Invocation.method(
          #isAdmin,
          [forceRefresh],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> isClient([bool? forceRefresh = false]) =>
      (super.noSuchMethod(
        Invocation.method(
          #isClient,
          [forceRefresh],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i17.DatabaseService {
  @override
  _i8.Future<void> setNewBooking({required _i18.Booking? booking}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setNewBooking,
          [],
          {#booking: booking},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i5.DeskBooking>> fetchConfirmedDeskBookings() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchConfirmedDeskBookings,
          [],
        ),
        returnValue:
            _i8.Future<List<_i5.DeskBooking>>.value(<_i5.DeskBooking>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i5.DeskBooking>>.value(<_i5.DeskBooking>[]),
      ) as _i8.Future<List<_i5.DeskBooking>>);

  @override
  _i8.Future<List<_i6.MeetingRoomBooking>>
      fetchConfirmedMeetingRoomBookings() => (super.noSuchMethod(
            Invocation.method(
              #fetchConfirmedMeetingRoomBookings,
              [],
            ),
            returnValue: _i8.Future<List<_i6.MeetingRoomBooking>>.value(
                <_i6.MeetingRoomBooking>[]),
            returnValueForMissingStub:
                _i8.Future<List<_i6.MeetingRoomBooking>>.value(
                    <_i6.MeetingRoomBooking>[]),
          ) as _i8.Future<List<_i6.MeetingRoomBooking>>);

  @override
  _i8.Future<List<_i18.Booking>> fetchBookings({required String? uid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBookings,
          [],
          {#uid: uid},
        ),
        returnValue: _i8.Future<List<_i18.Booking>>.value(<_i18.Booking>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i18.Booking>>.value(<_i18.Booking>[]),
      ) as _i8.Future<List<_i18.Booking>>);

  @override
  String getNewDocumentId({required String? collectionPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewDocumentId,
          [],
          {#collectionPath: collectionPath},
        ),
        returnValue: _i16.dummyValue<String>(
          this,
          Invocation.method(
            #getNewDocumentId,
            [],
            {#collectionPath: collectionPath},
          ),
        ),
        returnValueForMissingStub: _i16.dummyValue<String>(
          this,
          Invocation.method(
            #getNewDocumentId,
            [],
            {#collectionPath: collectionPath},
          ),
        ),
      ) as String);

  @override
  _i8.Future<void> createDocument({
    required Map<String, dynamic>? data,
    required String? collection,
    String? documentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDocument,
          [],
          {
            #data: data,
            #collection: collection,
            #documentId: documentId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateDocument({
    required Map<String, dynamic>? data,
    required String? collection,
    required String? documentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDocument,
          [],
          {
            #data: data,
            #collection: collection,
            #documentId: documentId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getCollection({
    required String? collection,
    Object? queryField,
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollection,
          [],
          {
            #collection: collection,
            #queryField: queryField,
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i8.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getSubCollection({
    required String? collection,
    required String? documentId,
    required String? subCollection,
    Object? queryField,
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubCollection,
          [],
          {
            #collection: collection,
            #documentId: documentId,
            #subCollection: subCollection,
            #queryField: queryField,
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i8.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<Map<String, dynamic>?> getDocument({
    required String? collection,
    required String? documentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocument,
          [],
          {
            #collection: collection,
            #documentId: documentId,
          },
        ),
        returnValue: _i8.Future<Map<String, dynamic>?>.value(),
        returnValueForMissingStub: _i8.Future<Map<String, dynamic>?>.value(),
      ) as _i8.Future<Map<String, dynamic>?>);

  @override
  _i8.Future<_i4.MemberData> setMemberData(
          {required _i4.MemberData? memberData}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMemberData,
          [],
          {#memberData: memberData},
        ),
        returnValue: _i8.Future<_i4.MemberData>.value(_FakeMemberData_4(
          this,
          Invocation.method(
            #setMemberData,
            [],
            {#memberData: memberData},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.MemberData>.value(_FakeMemberData_4(
          this,
          Invocation.method(
            #setMemberData,
            [],
            {#memberData: memberData},
          ),
        )),
      ) as _i8.Future<_i4.MemberData>);

  @override
  _i8.Future<List<Map<String, dynamic>>> queryMemberData() =>
      (super.noSuchMethod(
        Invocation.method(
          #queryMemberData,
          [],
        ),
        returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i8.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<Map<String, dynamic>> getUserMemberData(
          {required String? memberDataId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserMemberData,
          [],
          {#memberDataId: memberDataId},
        ),
        returnValue:
            _i8.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i8.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<void> createUser({
    required String? uid,
    required _i19.User? user,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [],
          {
            #uid: uid,
            #user: user,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> checkInOutUser({
    required String? uid,
    required bool? checkedIn,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkInOutUser,
          [],
          {
            #uid: uid,
            #checkedIn: checkedIn,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateProfilePicture({
    required String? uid,
    required String? photoUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfilePicture,
          [],
          {
            #uid: uid,
            #photoUrl: photoUrl,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i20.Desk>> fetchAvailableHotDesks() => (super.noSuchMethod(
        Invocation.method(
          #fetchAvailableHotDesks,
          [],
        ),
        returnValue: _i8.Future<List<_i20.Desk>>.value(<_i20.Desk>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.Desk>>.value(<_i20.Desk>[]),
      ) as _i8.Future<List<_i20.Desk>>);

  @override
  _i8.Future<void> setDesk({required _i20.Desk? desk}) => (super.noSuchMethod(
        Invocation.method(
          #setDesk,
          [],
          {#desk: desk},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setMeetingRoom({required _i21.MeetingRoom? meetingRoom}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMeetingRoom,
          [],
          {#meetingRoom: meetingRoom},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i21.MeetingRoom>> fetchAvailableMeetingRooms() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAvailableMeetingRooms,
          [],
        ),
        returnValue:
            _i8.Future<List<_i21.MeetingRoom>>.value(<_i21.MeetingRoom>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i21.MeetingRoom>>.value(<_i21.MeetingRoom>[]),
      ) as _i8.Future<List<_i21.MeetingRoom>>);

  @override
  _i8.Future<void> cancelBooking({required String? bookingId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelBooking,
          [],
          {#bookingId: bookingId},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [FunctionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFunctionsService extends _i1.Mock implements _i22.FunctionsService {}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i23.StorageService {
  @override
  _i8.Future<String> updateProfilePicture({
    required String? uid,
    required _i24.XFile? file,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfilePicture,
          [],
          {
            #uid: uid,
            #file: file,
          },
        ),
        returnValue: _i8.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #updateProfilePicture,
            [],
            {
              #uid: uid,
              #file: file,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #updateProfilePicture,
            [],
            {
              #uid: uid,
              #file: file,
            },
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<String> uploadDeskPicture({
    required _i24.XFile? file,
    required String? deskId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadDeskPicture,
          [],
          {
            #file: file,
            #deskId: deskId,
          },
        ),
        returnValue: _i8.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #uploadDeskPicture,
            [],
            {
              #file: file,
              #deskId: deskId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #uploadDeskPicture,
            [],
            {
              #file: file,
              #deskId: deskId,
            },
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<String> uploadMeetingRoomPicture({
    required String? meetingRoomId,
    required _i24.XFile? file,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadMeetingRoomPicture,
          [],
          {
            #meetingRoomId: meetingRoomId,
            #file: file,
          },
        ),
        returnValue: _i8.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #uploadMeetingRoomPicture,
            [],
            {
              #meetingRoomId: meetingRoomId,
              #file: file,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #uploadMeetingRoomPicture,
            [],
            {
              #meetingRoomId: meetingRoomId,
              #file: file,
            },
          ),
        )),
      ) as _i8.Future<String>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i25.AnalyticsService {}

/// A class which mocks [CrashlyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashlyticsService extends _i1.Mock
    implements _i26.CrashlyticsService {}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i27.UserService {
  @override
  bool get isSignedIn => (super.noSuchMethod(
        Invocation.getter(#isSignedIn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isEmailVerified => (super.noSuchMethod(
        Invocation.getter(#isEmailVerified),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get getSignupEmail => (super.noSuchMethod(
        Invocation.getter(#getSignupEmail),
        returnValue: _i16.dummyValue<String>(
          this,
          Invocation.getter(#getSignupEmail),
        ),
        returnValueForMissingStub: _i16.dummyValue<String>(
          this,
          Invocation.getter(#getSignupEmail),
        ),
      ) as String);

  @override
  _i8.Future<void> createUser({
    required String? firstName,
    required String? lastName,
    required String? phoneWhatsapp,
    required String? contactPhone,
    required DateTime? dateOfBirth,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
            #phoneWhatsapp: phoneWhatsapp,
            #contactPhone: contactPhone,
            #dateOfBirth: dateOfBirth,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateUser(_i19.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i19.User?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i8.Future<_i19.User?>.value(),
        returnValueForMissingStub: _i8.Future<_i19.User?>.value(),
      ) as _i8.Future<_i19.User?>);

  @override
  _i8.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setCheckInOut(bool? checkedIn) => (super.noSuchMethod(
        Invocation.method(
          #setCheckInOut,
          [checkedIn],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> updateProfilePicture({required _i24.XFile? file}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfilePicture,
          [],
          {#file: file},
        ),
        returnValue: _i8.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #updateProfilePicture,
            [],
            {#file: file},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #updateProfilePicture,
            [],
            {#file: file},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<bool> isAdmin() => (super.noSuchMethod(
        Invocation.method(
          #isAdmin,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [BookingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingService extends _i1.Mock implements _i28.BookingService {
  @override
  _i8.Future<_i5.DeskBooking> bookDesk({
    required DateTime? startDateTime,
    required DateTime? endDateTime,
    required _i20.Desk? hotDesk,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #bookDesk,
          [],
          {
            #startDateTime: startDateTime,
            #endDateTime: endDateTime,
            #hotDesk: hotDesk,
          },
        ),
        returnValue: _i8.Future<_i5.DeskBooking>.value(_FakeDeskBooking_5(
          this,
          Invocation.method(
            #bookDesk,
            [],
            {
              #startDateTime: startDateTime,
              #endDateTime: endDateTime,
              #hotDesk: hotDesk,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.DeskBooking>.value(_FakeDeskBooking_5(
          this,
          Invocation.method(
            #bookDesk,
            [],
            {
              #startDateTime: startDateTime,
              #endDateTime: endDateTime,
              #hotDesk: hotDesk,
            },
          ),
        )),
      ) as _i8.Future<_i5.DeskBooking>);

  @override
  _i8.Future<_i6.MeetingRoomBooking> bookMeetingRoom({
    required DateTime? startTime,
    required DateTime? endTime,
    required _i21.MeetingRoom? meetingRoom,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #bookMeetingRoom,
          [],
          {
            #startTime: startTime,
            #endTime: endTime,
            #meetingRoom: meetingRoom,
          },
        ),
        returnValue:
            _i8.Future<_i6.MeetingRoomBooking>.value(_FakeMeetingRoomBooking_6(
          this,
          Invocation.method(
            #bookMeetingRoom,
            [],
            {
              #startTime: startTime,
              #endTime: endTime,
              #meetingRoom: meetingRoom,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.MeetingRoomBooking>.value(_FakeMeetingRoomBooking_6(
          this,
          Invocation.method(
            #bookMeetingRoom,
            [],
            {
              #startTime: startTime,
              #endTime: endTime,
              #meetingRoom: meetingRoom,
            },
          ),
        )),
      ) as _i8.Future<_i6.MeetingRoomBooking>);

  @override
  _i8.Future<List<_i18.Booking>> fetchUserBookings() => (super.noSuchMethod(
        Invocation.method(
          #fetchUserBookings,
          [],
        ),
        returnValue: _i8.Future<List<_i18.Booking>>.value(<_i18.Booking>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i18.Booking>>.value(<_i18.Booking>[]),
      ) as _i8.Future<List<_i18.Booking>>);

  @override
  _i8.Future<List<_i18.Booking>> fetchAllBookings(
          {required _i29.BookingType? type}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllBookings,
          [],
          {#type: type},
        ),
        returnValue: _i8.Future<List<_i18.Booking>>.value(<_i18.Booking>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i18.Booking>>.value(<_i18.Booking>[]),
      ) as _i8.Future<List<_i18.Booking>>);

  @override
  _i8.Future<void> cancelBooking(_i18.Booking? booking) => (super.noSuchMethod(
        Invocation.method(
          #cancelBooking,
          [booking],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [DesksService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDesksService extends _i1.Mock implements _i30.DesksService {
  @override
  _i8.Future<List<_i20.Desk>> fetchAvailableHotDesks() => (super.noSuchMethod(
        Invocation.method(
          #fetchAvailableHotDesks,
          [],
        ),
        returnValue: _i8.Future<List<_i20.Desk>>.value(<_i20.Desk>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.Desk>>.value(<_i20.Desk>[]),
      ) as _i8.Future<List<_i20.Desk>>);

  @override
  _i8.Future<void> addDesk({required _i20.Desk? desk}) => (super.noSuchMethod(
        Invocation.method(
          #addDesk,
          [],
          {#desk: desk},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [MemberDataService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemberDataService extends _i1.Mock implements _i31.MemberDataService {
  @override
  List<_i4.MemberData> get workspaceMembers => (super.noSuchMethod(
        Invocation.getter(#workspaceMembers),
        returnValue: <_i4.MemberData>[],
        returnValueForMissingStub: <_i4.MemberData>[],
      ) as List<_i4.MemberData>);

  @override
  _i8.Future<_i4.MemberData> getUserMemberData(
          {required String? memberDataId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserMemberData,
          [],
          {#memberDataId: memberDataId},
        ),
        returnValue: _i8.Future<_i4.MemberData>.value(_FakeMemberData_4(
          this,
          Invocation.method(
            #getUserMemberData,
            [],
            {#memberDataId: memberDataId},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.MemberData>.value(_FakeMemberData_4(
          this,
          Invocation.method(
            #getUserMemberData,
            [],
            {#memberDataId: memberDataId},
          ),
        )),
      ) as _i8.Future<_i4.MemberData>);

  @override
  _i8.Future<void> setMemberData({required _i4.MemberData? memberData}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMemberData,
          [],
          {#memberData: memberData},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateMemberProfilePicture({required String? photoUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMemberProfilePicture,
          [],
          {#photoUrl: photoUrl},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i4.MemberData>> queryWorkspaceMembers() =>
      (super.noSuchMethod(
        Invocation.method(
          #queryWorkspaceMembers,
          [],
        ),
        returnValue: _i8.Future<List<_i4.MemberData>>.value(<_i4.MemberData>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i4.MemberData>>.value(<_i4.MemberData>[]),
      ) as _i8.Future<List<_i4.MemberData>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ImagePickerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePickerService extends _i1.Mock
    implements _i32.ImagePickerService {
  @override
  _i8.Future<_i24.XFile?> pickImage() => (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
        ),
        returnValue: _i8.Future<_i24.XFile?>.value(),
        returnValueForMissingStub: _i8.Future<_i24.XFile?>.value(),
      ) as _i8.Future<_i24.XFile?>);
}

/// A class which mocks [UrlLauncherService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherService extends _i1.Mock
    implements _i33.UrlLauncherService {
  @override
  _i8.Future<void> launchWeb({
    required String? host,
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #launchWeb,
          [],
          {
            #host: host,
            #path: path,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> launchPhone(String? phone) => (super.noSuchMethod(
        Invocation.method(
          #launchPhone,
          [phone],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> launchMail(String? mail) => (super.noSuchMethod(
        Invocation.method(
          #launchMail,
          [mail],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [MeetingRoomService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeetingRoomService extends _i1.Mock
    implements _i34.MeetingRoomService {
  @override
  _i8.Future<List<_i21.MeetingRoom>> fetchAvailableMeetingRooms() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAvailableMeetingRooms,
          [],
        ),
        returnValue:
            _i8.Future<List<_i21.MeetingRoom>>.value(<_i21.MeetingRoom>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i21.MeetingRoom>>.value(<_i21.MeetingRoom>[]),
      ) as _i8.Future<List<_i21.MeetingRoom>>);

  @override
  _i8.Future<void> addMeetingRoom({required _i21.MeetingRoom? meetingRoom}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMeetingRoom,
          [],
          {#meetingRoom: meetingRoom},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
